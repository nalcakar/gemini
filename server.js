const express = require("express");
const cors = require("cors");
const path = require("path");
const session = require("express-session");
const passport = require("passport");
const OAuth2Strategy = require("passport-oauth2");
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { franc } = require("franc");
const fetch = require("node-fetch");
require("dotenv").config();

const app = express();
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// === MIDDLEWARE ===
app.use(cors({ origin: true, credentials: true }));
app.use(session({
  secret: process.env.SESSION_SECRET || 'patreon_secret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: false, // HTTPS ortamda: true
    sameSite: "lax" // HTTPS ortamda: "none"
  }
}));
app.use(express.json());
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static(path.join(__dirname, "public")));

// === PASSPORT CONFIG ===
passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

passport.use("patreon", new OAuth2Strategy({
  authorizationURL: "https://www.patreon.com/oauth2/authorize",
  tokenURL: "https://www.patreon.com/api/oauth2/token",
  clientID: process.env.PATREON_CLIENT_ID,
  clientSecret: process.env.PATREON_CLIENT_SECRET,
  callbackURL: process.env.PATREON_REDIRECT_URI
},
async (accessToken, refreshToken, profile, done) => {
  try {
    const res = await fetch("https://www.patreon.com/api/oauth2/v2/identity?include=memberships.currently_entitled_tiers&fields[user]=full_name,email&fields[tier]=title", {
      headers: { Authorization: `Bearer ${accessToken}` }
    });
    const data = await res.json();

    let tier = "ZiyaretÃ§i";
    if (Array.isArray(data.included)) {
      const entitledTier = data.included.find(item => item.type === "tier");
      if (entitledTier?.attributes?.title) {
        tier = entitledTier.attributes.title.trim();
      }
    }

    const user = {
      name: data.data.attributes.full_name,
      email: data.data.attributes.email,
      patreon_id: data.data.id,
      tier
    };
    return done(null, user);
  } catch (err) {
    console.error("Patreon API error:", err);
    return done(err, null);
  }
}));

// === GÄ°RÄ°Åž / Ã‡IKIÅž ROUTE ===
app.get("/auth/patreon", passport.authenticate("patreon"));
app.get("/auth/patreon/callback",
  passport.authenticate("patreon", {
    failureRedirect: "/?error=giris",
    successRedirect: "/"
  })
);

app.get("/logout", (req, res) => {
  req.logout(() => {
    req.session.destroy(() => {
      res.clearCookie("connect.sid");
      res.redirect("/");
    });
  });
});

// === FRONTEND'E GÄ°RÄ°Åž DURUMU VER ===
app.get("/me", (req, res) => {
  const user = req.session?.passport?.user || null;

  res.json({
    user,
    usage: {
      freeCount: req.session.freeCount || 0,
      anonCount: req.session.anonCount || 0
    }
  });
});

// === GEMINI SORU ÃœRETME SINIRLI ===
app.post("/generate-questions", (req, res, next) => {
  const user = req.session?.passport?.user;
  const today = new Date().toISOString().split("T")[0];

  // VarsayÄ±lan deÄŸerler (ziyaretÃ§i iÃ§in)
  let minCount = 5;
  let maxCount = 5;

  // ðŸš« GiriÅŸ yapÄ±lmamÄ±ÅŸsa
  if (!user) {
    if (req.session.anonDate !== today) {
      req.session.anonCount = 0;
      req.session.anonDate = today;
    }

    req.session.anonCount = (req.session.anonCount || 0) + 1;

    if (req.session.anonCount > 5) {
      return res.status(403).json({
        error: "GiriÅŸ yapmadan gÃ¼nlÃ¼k en fazla 5 Ã¼retim yapabilirsiniz."
      });
    }

    req.soruAyari = { minCount, maxCount };
    return next();
  }

  // âœ… GiriÅŸ yapan kullanÄ±cÄ±
  const tier = (user.tier || "").toLowerCase();

  if (tier.includes("pro")) {
    minCount = 15;
    maxCount = 20;
    req.soruAyari = { minCount, maxCount };
    return next();
  }

  if (tier.includes("Ã¼yelik")) {
    minCount = 10;
    maxCount = 10;

    if (req.session.freeDate !== today) {
      req.session.freeCount = 0;
      req.session.freeDate = today;
    }

    req.session.freeCount = (req.session.freeCount || 0) + 1;

    if (req.session.freeCount > 5) {
      return res.status(403).json({
        error: "Ãœyelik seviyesinde gÃ¼nlÃ¼k en fazla 5 Ã¼retim yapabilirsiniz."
      });
    }

    req.soruAyari = { minCount, maxCount };
    return next();
  }

  // Her ihtimale karÅŸÄ± varsayÄ±lan
  req.soruAyari = { minCount, maxCount };
  next();
}, async (req, res) => {
  const { content } = req.body;
  const { minCount, maxCount } = req.soruAyari;

  const langCode = franc(content);
  const languageMap = {
    eng: "Ä°ngilizce", tur: "TÃ¼rkÃ§e", spa: "Ä°spanyolca", fra: "FransÄ±zca",
    deu: "Almanca", ita: "Ä°talyanca", por: "Portekizce", rus: "RusÃ§a",
    jpn: "Japonca", kor: "Korece", nld: "FlemenkÃ§e", pol: "LehÃ§e",
    ara: "ArapÃ§a", hin: "HintÃ§e", ben: "Bengalce", zho: "Ã‡ince",
    vie: "Vietnamca", tha: "Tayca", ron: "Romence", ukr: "Ukraynaca"
  };

  const questionLanguage = languageMap[langCode] || "TÃ¼rkÃ§e";

  const prompt = `
Metin ${questionLanguage} dilindedir. LÃ¼tfen bu dilde Ã§oktan seÃ§meli sorular Ã¼ret.

Kurallar:
- Her soru *** ile baÅŸlamalÄ±.
- Her sorunun 4 ÅŸÄ±kkÄ± olmalÄ±. ÅžÄ±klar /// ile baÅŸlasÄ±n.
- Her sorunun altÄ±nda doÄŸru cevabÄ± belirt: "~~Cevap: [cevap metni]" ÅŸeklinde olsun.
- AyrÄ±ca metne gÃ¶re mutlaka bir aÃ§Ä±klama ekle: "&&AÃ§Ä±klama: [aÃ§Ä±klama metni]" olsun.
- En az ${minCount} soru, en fazla ${maxCount} soru Ã¼ret.
- Sadece metin formatÄ±nda yanÄ±t ver. JSON veya kod bloÄŸu istemiyorum.
- CevaplarÄ± **tam metin olarak** dÃ¶ndÃ¼r.

Metin:
${content}
`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const text = await result.response.text();
    res.json({ questions: text });
  } catch (err) {
    console.error("Soru Ã¼retimi hatasÄ±:", err.message);
    res.status(500).json({ error: "Soru Ã¼retilemedi" });
  }
});




// patreon >>>>//


// SESSION
app.use(session({
  secret: process.env.SESSION_SECRET || 'patreon_secret',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: false, // Render iÃ§in: true
    sameSite: "lax" // Render iÃ§in: "none"
  }
}));

// PASSPORT BAÅžLAT
app.use(passport.initialize());
app.use(passport.session());

// KULLANICI SERÄ°LEÅžTÄ°RME / DESERÄ°LEÅžTÄ°RME
passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

// PATREON STRATEJÄ°SÄ°
passport.use("patreon", new OAuth2Strategy({
  authorizationURL: "https://www.patreon.com/oauth2/authorize",
  tokenURL: "https://www.patreon.com/api/oauth2/token",
  clientID: process.env.PATREON_CLIENT_ID,
  clientSecret: process.env.PATREON_CLIENT_SECRET,
  callbackURL: process.env.PATREON_REDIRECT_URI
},
async (accessToken, refreshToken, profile, done) => {
  try {
    const res = await fetch("https://www.patreon.com/api/oauth2/v2/identity?include=memberships.currently_entitled_tiers&fields[user]=full_name,email&fields[tier]=title", {
      headers: {
        Authorization: `Bearer ${accessToken}`
      }
    });

    const data = await res.json();
    console.log("Patreon API:", JSON.stringify(data, null, 2));

    let tier = "ZiyaretÃ§i";
    if (Array.isArray(data.included)) {
      const entitledTier = data.included.find(item => item.type === "tier");
      if (entitledTier?.attributes?.title) {
        tier = entitledTier.attributes.title.trim();
      }
    }

    const user = {
      name: data.data.attributes.full_name,
      email: data.data.attributes.email || null,
      patreon_id: data.data.id,
      tier
    };

    return done(null, user);
  } catch (err) {
    console.error("Patreon API error:", err);
    return done(err, null);
  }
}));


app.get("/auth/patreon", passport.authenticate("patreon"));

app.get("/auth/patreon/callback", passport.authenticate("patreon", {
  failureRedirect: "/",
  successRedirect: "/"
}));

app.get("/me", (req, res) => {
  const user = req.session?.passport?.user || null;
  res.json({
    user,
    usage: {
      freeCount: req.session.freeCount || 0,
      anonCount: req.session.anonCount || 0
    }
  });
});


app.get("/logout", (req, res) => {
  req.logout(err => {
    if (err) {
      console.error("Ã‡Ä±kÄ±ÅŸ sÄ±rasÄ±nda hata:", err);
      return res.status(500).send("Ã‡Ä±kÄ±ÅŸ yapÄ±lamadÄ±.");
    }

    req.session.destroy(() => {
      res.clearCookie("connect.sid"); // opsiyonel: oturum Ã§erezini temizle
      res.redirect("/"); // anasayfaya yÃ¶nlendir
    });
  });
});

// <<<< patreon //

// === SPA ROUTING: DiÄŸer tÃ¼m isteklerde index.html dÃ¶n ===
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// === SUNUCUYU BAÅžLAT ===
const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`âœ… Sunucu Ã§alÄ±ÅŸÄ±yor: http://localhost:${PORT}`);
});
